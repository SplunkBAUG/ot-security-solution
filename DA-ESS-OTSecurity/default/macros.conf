[get_esp_zone(1)]
args = zone
definition = makemv $zone$ delim="|"\
| mvexpand $zone$\
| search $zone$="esp:*"\
| eval $zone$=UPPER(replace($zone$, "esp:", ""))
iseval = 0

[get_cip_info_by_hostname(2)]
args = hostfield,prefix
definition = lookup cip_asset_lookup.csv nt_host as $hostfield$ OUTPUTNEW classification as $prefix$_classification, location as $prefix$_location,nt_host as $prefix$_nt_host, zone as $prefix$_zone, ip as $prefix$_ip, priority as $prefix$_priority, lat as $prefix$_lat, long as $prefix$_long, asset_type as $prefix$_asset_type, dns as $prefix$_dns, category as $prefix$_category, requires_av as $prefix$_requires_av, should_update as $prefix$_should_update, site_id as $prefix$_site_id
iseval = 0

[get_cip_info_by_ip(2)]
args = ipfield,prefix
definition = lookup cip_asset_lookup.csv ip as $ipfield$ OUTPUT classification as $prefix$_classification, location as $prefix$_location,nt_host as $prefix$_nt_host, zone as $prefix$_zone, priority as $prefix$_priority, lat as $prefix$_lat, long as $prefix$_long, asset_type as $prefix$_asset_type, dns as $prefix$_dns, category as $prefix$_category, requires_av as $prefix$_requires_av, should_update as $prefix$_should_update, site_id as $prefix$_site_id
iseval = 0

[get_cip_type_and_icon(3)]
args = assetField,iconField,masterField
definition = lookup cip_asset_type_lookup.csv asset_type as $assetField$ OUTPUTNEW icon as $iconField$, asset_master_type as $masterField$, color
iseval = 0

[get_usb_datasources]
definition = index=*
iseval = 0

[get_firewall_datasources]
definition = index=*
iseval = 0

[get_cip_info_by_dns(2)]
args = dnsfield,prefix
definition = lookup cip_asset_lookup.csv dns as $dnsfield$ OUTPUTNEW classification as $prefix$_classification, location as $prefix$_location,nt_host as $prefix$_nt_host, zone as $prefix$_zone, priority as $prefix$_priority, lat as $prefix$_lat, long as $prefix$_long, asset_type as $prefix$_asset_type, dns as $prefix$_dns, category as $prefix$_category, requires_av as $prefix$_requires_av, should_update as $prefix$_should_update, site_id as $prefix$_site_id
iseval = 0

[get_app_datamodel]
definition = sourcetype="script:installedapps"
iseval = 0

[get_baseline_group]
definition = join type=left host [| inputlookup cip_baseline_groups | makemv delim="|" group_members | mvexpand group_members | rename group_members as host | eval group_id=_key | fields host, group_name,group_id ]
iseval = 0

[get_baseline_os]
definition = join type=left group_id \
[| `get_os_baseline`  \
| eval baseline_id=_key, baseline_OS=os_name \
| rename created_date as baseline_created_date | fields baseline_created_date,baseline_OS,group_id,baseline_id ]
iseval = 0

[get_baseline_applications]
definition = join type=left group_id,value \
    [| `get_application_baseline`\
    | eval app_type=software_type, value=name.":".version.":".publisher\
    | fields group_id,baseline_id,value,app_type ]
iseval = 0

[get_eventreview_tags]
definition = tag=authentication OR tag=malware OR tag=update
iseval = 0

[get_installedapps_datasources]
definition = sourcetype="Script:InstalledApps"
iseval = 0

[get_os_datasources]
definition = source=operatingsystem sourcetype=winhostmon
iseval = 0

[get_baseline_patches]
definition = join type=left group_id,kb \
    [| `get_patch_baseline` \
    | eval baseline_title=title, baseline_update_type=patch_type, baseline_severity=severity, baseline_is_declined=is_declined, baseline_approval_state=is_approved, baseline_patch_creation_date=patch_creation_date\
    | rename created_date as baseline_created_date \
    | fields baseline_*,group_id,kb ]
iseval = 0

[get_high_cip_assets(1)]
args = besField
definition = $besField$="*cip:high*"
iseval = 0

[get_low_cip_assets(1)]
args = besField
definition = $besField$="*cip:low*"
iseval = 0

[get_medium_cip_assets(1)]
args = besField
definition = $besField$="*cip:medium*"
iseval = 0

[get_medium_or_low_cip_assets(1)]
args = besField
definition = $besField$="*cip:medium*" OR $besField$="*cip:low*"
iseval = 0

[get_high_medium_low_cip_assets(1)]
args = besField
definition = $besField$="*cip:high*" OR $besField$="*cip:medium*" OR $besField$="*cip:low*"
iseval = 0

[get_cip_pca_assets(1)]
args = categoryField
definition = $categoryField$="*cip:PCA*"
iseval = 0

[get_cip_tca_assets(1)]
args = categoryField
definition = $categoryField$="*cip:TCA*"
iseval = 0

[get_removable_media_indexes]
definition = index=*
iseval = 0

[get_high_medium_cip_assets(1)]
args = besField
definition = $besField$="*cip:high*" OR $besField$="*cip:medium*"
iseval = 0

[get_baseline_app_installs]
definition = join type=left group_id,value \
    [ search sourcetype="Script:InstalledApps" \
    | `get_baseline_group` \
    | fillnull DisplayVersion,DisplayName,Publisher value="NA" \
    | eval DisplayName=replace(DisplayName, "\"", ""),value=DisplayName.":".DisplayVersion.":".Publisher, installed="True" \
    | search group_id=* \
    | fields group_id,value,installed,host,group_name ]
iseval = 0

[get_cip_bca_assets(1)]
args = categoryField
definition = $categoryField$="*cip:BCA*"
iseval = 0

[get_cip_asset_type(2)]
args = classificationField, name
definition = eval $name$=CASE(\
match($classificationField$, ".*cip:BCA.*"), "BCA",\
match($classificationField$, ".*cip:PCA.*"), "PCA",\
match($classificationField$, ".*cip:EACM.*"), "EACM",\
match($classificationField$, ".*cip:PACS.*"), "PACS",\
match($classificationField$, ".*cip:TCA.*"), "TCA")
iseval = 0

[get_2fa_indexes]
definition = index=*
iseval = 0

[get_application_baseline]
definition = inputlookup system_baselines \
| eval baseline_id=_key\
| search config_type=applications config_asset_type=computer\
| spath input=config path=configs{} output=software \
| mvexpand software\
| eval software=replace(software, ":\s\",", ": \"")\
| eval software=replace(software, ",[^\"]", " ")\
| eval software=replace(software, "\{", ""), software=replace(software, "\}", ""), software=replace(software, "\"", "") \
| eval software=split(software,","), software=TRIM(software)\
| eval software_type=mvindex(software, 0), name=mvindex(software, 1), version=mvindex(software, 2), publisher=mvindex(software, 3)\
| eval software_type=split(software_type, ":"), software_type=TRIM(mvindex(software_type, 1))\
| eval name=split(name, ":"), name=TRIM(mvindex(name, 1))\
| eval version=split(version, ":"), version=TRIM(mvindex(version, 1))\
| eval publisher=split(publisher, ":"), publisher=TRIM(mvindex(publisher, 1))\
| fields baseline_id,group_id,software_type,name,version,publisher,created_date
iseval = 0

[get_application_baseline_for_group(1)]
args = groupId
definition = inputlookup system_baselines \
| eval baseline_id=_key\
| search group_id=$groupId$ config_type=applications config_asset_type=computer\
| sort -created_date\
| head 1\
| spath input=config path=configs{} output=software \
| mvexpand software\
| eval software=replace(software, "\{", ""), software=replace(software, "\}", ""), software=replace(software, "\"", "") \
| eval software=split(software,","), software=TRIM(software)\
| eval software_type=mvindex(software, 0), name=mvindex(software, 1), version=mvindex(software, 2), publisher=mvindex(software, 3)\
| eval software_type=split(software_type, ":"), software_type=TRIM(mvindex(software_type, 1))\
| eval name=split(name, ":"), name=TRIM(mvindex(name, 1))\
| eval version=split(version, ":"), version=TRIM(mvindex(version, 1))\
| eval publisher=split(publisher, ":"), publisher=TRIM(mvindex(publisher, 1))\
| fields baseline_id,group_id,software_type,name,version,publisher,created_date
iseval = 0

[get_os_baseline]
definition = inputlookup system_baselines \
| eval baseline_id=_key \
| search config_type=os config_asset_type=computer \
| spath input=config path=configs{} output=os_name \
| mvexpand os_name| eval os_name=replace(os_name, "\{", ""), os_name=replace(os_name, "\}", ""), os_name=replace(os_name, "\"", "") \
| eval os_name=split(os_name,","), os_name=TRIM(os_name) \
| eval os_name=mvindex(os_name, 0)\
| eval os_name=split(os_name, ":"), os_name=TRIM(mvindex(os_name, 1)) \
| fields baseline_id,group_id,created_date,os_name
iseval = 0

[get_os_baseline_for_group(1)]
args = groupId
definition = inputlookup system_baselines \
| eval baseline_id=_key \
| search config_type=os config_asset_type=computer group_id=$groupId$\
| sort -created_date\
| head 1\
| spath input=config path=configs{} output=os_name \
| mvexpand os_name| eval os_name=replace(os_name, "\{", ""), os_name=replace(os_name, "\}", ""), os_name=replace(os_name, "\"", "") \
| eval os_name=split(os_name,","), os_name=TRIM(os_name) \
| eval os_name=mvindex(os_name, 0)\
| eval os_name=split(os_name, ":"), os_name=TRIM(mvindex(os_name, 1)) \
| fields baseline_id,group_id,created_date,os_name
iseval = 0

[get_portconfig_baseline]
definition = inputlookup system_baselines \
| eval baseline_id=_key \
| search config_type=port_config config_asset_type=network \
| spath input=config path=configs{} output=port_config \
| mvexpand port_config \
| eval port_config=replace(port_config, "\{", ""), port_config=replace(port_config, "\}", ""), port_config=replace(port_config, "\"", "") \
| eval port_config=split(port_config,","), port_config=TRIM(port_config) \
| eval port_id=mvindex(port_config, 0), speed=mvindex(port_config, 1), is_duplex=mvindex(port_config, 2), is_enabled=mvindex(port_config, 3) \
| eval port_id=split(port_id, ":"), port_id=TRIM(mvindex(port_id, 1)) \
| eval speed=split(speed, ":"), speed=TRIM(mvindex(speed, 1)) \
| eval is_duplex=split(is_duplex, ":"), is_duplex=TRIM(mvindex(is_duplex, 1)) \
| eval is_enabled=split(is_enabled, ":"), is_enabled=TRIM(mvindex(is_enabled, 1)) \
| fields baseline_id,group_id,port_id,speed,is_duplex,is_enabled,created_date
iseval = 0

[get_portconfig_baseline_for_group(1)]
args = groupId
definition = inputlookup system_baselines \
| eval baseline_id=_key \
| search config_type=port_config config_asset_type=network group_id=$groupId$\
| spath input=config path=configs{} output=port_config \
| mvexpand port_config \
| eval port_config=replace(port_config, "\{", ""), port_config=replace(port_config, "\}", ""), port_config=replace(port_config, "\"", "") \
| eval port_config=split(port_config,","), port_config=TRIM(port_config) \
| eval port_id=mvindex(port_config, 0), speed=mvindex(port_config, 1), is_duplex=mvindex(port_config, 2), is_enabled=mvindex(port_config, 3) \
| eval port_id=split(port_id, ":"), port_id=TRIM(mvindex(port_id, 1)) \
| eval speed=split(speed, ":"), speed=TRIM(mvindex(speed, 1)) \
| eval is_duplex=split(is_duplex, ":"), is_duplex=TRIM(mvindex(is_duplex, 1)) \
| eval is_enabled=split(is_enabled, ":"), is_enabled=TRIM(mvindex(is_enabled, 1)) \
| fields baseline_id,group_id,port_id,speed,is_duplex,is_enabled,created_date
iseval = 0

[get_patch_baseline]
definition = inputlookup system_baselines \
| eval baseline_id=_key \
| search config_type=patch config_asset_type=computer\
| spath input=config path=configs{} output=patch_config \
| mvexpand patch_config \
| eval patch_config=replace(patch_config, ",[^\"]", " ")\
| eval patch_config=replace(patch_config, "\{", ""), patch_config=replace(patch_config, "\}", ""), patch_config=replace(patch_config, "\"", "") \
| eval patch_config=split(patch_config,","), patch_config=TRIM(patch_config) \
| eval kb=mvindex(patch_config,0), title=mvindex(patch_config,1), patch_type=mvindex(patch_config,2), severity=mvindex(patch_config,3), is_declined=mvindex(patch_config,4), is_approved=mvindex(patch_config,5), patch_creation_date=mvindex(patch_config,6) \
| eval kb=split(kb, ":"), kb=TRIM(mvindex(kb, 1)) \
| eval title=split(title, ":"), title=TRIM(mvindex(title, 1)) \
| eval patch_type=split(patch_type, ":"), patch_type=TRIM(mvindex(patch_type, 1))\
| eval severity=split(severity, ":"), severity=TRIM(mvindex(severity, 1))\
| eval is_declined=split(is_declined, ":"), is_declined=TRIM(mvindex(is_declined, 1)) \
| eval is_approved=split(is_approved, ":"), is_approved=TRIM(mvindex(is_approved, 1)) \
| eval patch_creation_date=split(patch_creation_date, ":"), patch_creation_date=TRIM(mvindex(patch_creation_date, 1)) \
| fields baseline_id,group_id,created_date,kb,title,patch_type,severity,is_declined,is_approved,patch_creation_date
iseval = 0

[get_patch_baseline_for_group(1)]
args = groupId
definition = inputlookup system_baselines \
| eval baseline_id=_key \
| search config_type=patch config_asset_type=computer group_id=$groupId$\
| spath input=config path=configs{} output=patch_config \
| mvexpand patch_config \
| eval patch_config=replace(patch_config, ",[^\"]", " ")\
| eval patch_config=replace(patch_config, "\{", ""), patch_config=replace(patch_config, "\}", ""), patch_config=replace(patch_config, "\"", "") \
| eval patch_config=split(patch_config,","), patch_config=TRIM(patch_config) \
| eval kb=mvindex(patch_config,0), title=mvindex(patch_config,1), patch_type=mvindex(patch_config,2), severity=mvindex(patch_config,3), is_declined=mvindex(patch_config,4), is_approved=mvindex(patch_config,5), patch_creation_date=mvindex(patch_config,6) \
| eval kb=split(kb, ":"), kb=TRIM(mvindex(kb, 1)) \
| eval title=split(title, ":"), title=TRIM(mvindex(title, 1)) \
| eval patch_type=split(patch_type, ":"), patch_type=TRIM(mvindex(patch_type, 1))\
| eval severity=split(severity, ":"), severity=TRIM(mvindex(severity, 1))\
| eval is_declined=split(is_declined, ":"), is_declined=TRIM(mvindex(is_declined, 1)) \
| eval is_approved=split(is_approved, ":"), is_approved=TRIM(mvindex(is_approved, 1)) \
| eval patch_creation_date=split(patch_creation_date, ":"), patch_creation_date=TRIM(mvindex(patch_creation_date, 1)) \
| fields baseline_id,group_id,created_date,kb,title,patch_type,severity,is_declined,is_approved,patch_creation_date
iseval = 0
