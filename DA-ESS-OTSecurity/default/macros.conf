#### Section for OT Security

[get_config(1)]
args = arg1
definition = | inputlookup ot_security_config\
| search config_name=$arg1$\
| rex field=value max_match=10 "(?<value>\w+)"\
| table value\
| mvexpand value\
| rex field=value mode=sed "s/^/\"/g"\
| rex field=value mode=sed "s/$/\"/g"\
| stats values(value) as value\
| nomv value
iseval = 0
validation = 

[make_ot_asset_pri_matrix]
definition = tag=ot_asset \
| dedup nt_host, asset_id, ip, mac, asset_vendor, asset_model \
| table _time sourcetype nt_host asset_id category ip mac description priority location exposure zone asset_model asset_type asset_vendor asset_version classification location asset_system \
| eval asset_id=lower(asset_id), asset_type=lower(asset_type), asset_vendor=lower(asset_vendor) , asset_version=lower(asset_version), asset_model=lower(asset_model), nt_host=lower(nt_host), category=lower(category), exposure=lower(exposure), location=lower(location), description=lower(description) \
| table _time sourcetype ip mac nt_host asset_id dns owner priority lat long city country bunit category pci_domain is_expected should_timesync should_update requires_av asset_type classification description exposure is_safety_related location asset_status asset_vendor asset_version asset_model zone \
| eval join_field="asset_crit_attributes" \
| lookup ot_security_config config_name as join_field OUTPUT value as priority_join \
| stats count as asset_count, last(priority_join) as priority_join by \
    [| inputlookup ot_security_config \
    | search config_name=asset_crit_attributes \
    | rex field=value max_match=10 "(?<value>\w+)" \
    | table value \
    | mvexpand value \
    | rex field=value mode=sed "s/^/\"/g" \
    | rex field=value mode=sed "s/$/\"/g" \
    | stats values(value) as value \
    | nomv value \
    | return $value ] \
| sort - asset_count \
| table \
    [| inputlookup ot_security_config \
    | search config_name=asset_crit_attributes \
    | rex field=value max_match=10 "(?<value>\w+)" \
    | table value \
    | mvexpand value \
    | rex field=value mode=sed "s/^/\"/g" \
    | rex field=value mode=sed "s/$/\"/g" \
    | stats values(value) as value \
    | nomv value \
    | return $value ] asset_count asset_criticality \
| strcat \
    [| inputlookup ot_security_config \
    | search config_name=asset_crit_attributes \
    | rex field=value max_match=10 "(?<value>\w+)" \
    | table value \
    | mvexpand value \
    | stats values(value) as value \
    | nomv value \
    | rex mode=sed field=value "s/ / \":\" /g" \
    | return $value ] priority_join \
| outputlookup ot_asset_pri_matrix_tmp.csv
iseval = 0

[make_ot_asset_pri_matrix_update]
definition = tag=ot_asset \
| dedup nt_host, asset_id, ip, mac, asset_vendor, asset_model \
| table _time sourcetype nt_host asset_id category ip mac description priority location exposure zone asset_model asset_type asset_vendor asset_version classification location asset_system \
| eval asset_id=lower(asset_id), asset_type=lower(asset_type), asset_vendor=lower(asset_vendor) , asset_version=lower(asset_version), asset_model=lower(asset_model), nt_host=lower(nt_host), category=lower(category), exposure=lower(exposure), location=lower(location), description=lower(description) \
| table _time sourcetype ip mac nt_host asset_id dns owner priority lat long city country bunit category pci_domain is_expected should_timesync should_update requires_av asset_type classification description exposure is_safety_related location asset_status asset_vendor asset_version asset_model zone \
| eval join_field="asset_crit_attributes" \
| lookup ot_security_config config_name as join_field OUTPUT value as priority_join \
| stats count as asset_count, last(priority_join) as priority_join by \
    [| inputlookup ot_security_config \
    | search config_name=asset_crit_attributes \
    | rex field=value max_match=10 "(?<value>\w+)" \
    | table value \
    | mvexpand value \
    | rex field=value mode=sed "s/^/\"/g" \
    | rex field=value mode=sed "s/$/\"/g" \
    | stats values(value) as value \
    | nomv value \
    | return $value ] \
| sort - asset_count \
| table \
    [| inputlookup ot_security_config \
    | search config_name=asset_crit_attributes \
    | rex field=value max_match=10 "(?<value>\w+)" \
    | table value \
    | mvexpand value \
    | rex field=value mode=sed "s/^/\"/g" \
    | rex field=value mode=sed "s/$/\"/g" \
    | stats values(value) as value \
    | nomv value \
    | return $value ] asset_count asset_criticality \
| strcat \
    [| inputlookup ot_security_config \
    | search config_name=asset_crit_attributes \
    | rex field=value max_match=10 "(?<value>\w+)" \
    | table value \
    | mvexpand value \
    | stats values(value) as value \
    | nomv value \
    | rex mode=sed field=value "s/ / \":\" /g" \
    | return $value ] priority_join \
| outputlookup ot_asset_pri_matrix_tmp.csv
iseval = 0

[get_ot_assets_hw]
definition = inputlookup asset_lookup_by_str\
| search category="*ot*" \
| dedup nt_host, asset_id, ip, mac, asset_vendor, asset_model \
| table _time sourcetype asset_id asset_model asset_status asset_system asset_type asset_vendor asset_version asset_criticality bunit category city classification country dns end_of_support exposure ip is_expected lat location long mac nt_host owner parent_asset_id pci_domain priority product_details requires_av serial should_timesync should_update site_id vlan zone \
| eval asset_id=lower(asset_id), asset_model=lower(asset_model), asset_status=lower(asset_status), asset_system=lower(asset_system), asset_type=lower(asset_type), asset_vendor=lower(asset_vendor), asset_version=lower(asset_version), asset_criticality=lower(asset_criticality), bunit=lower(bunit), category=lower(category), city=lower(city), classification=lower(classification), country=lower(country), dns=lower(dns), end_of_support=lower(end_of_support), exposure=lower(exposure), ip=lower(ip), is_expected=lower(is_expected), lat=lower(lat), location=lower(location), long=lower(long), mac=lower(mac), nt_host=lower(nt_host), owner=lower(owner), parent_asset_id=lower(parent_asset_id), pci_domain=lower(pci_domain), priority=lower(priority), product_details=lower(product_details), requires_av=lower(requires_av), serial=lower(serial), should_timesync=lower(should_timesync), should_update=lower(should_update), site_id=lower(site_id), vlan=lower(vlan), zone=lower(zone)\
| table _time sourcetype asset_id asset_model asset_status asset_system asset_type asset_vendor asset_version asset_criticality bunit category city classification country dns end_of_support exposure ip is_expected lat location long mac nt_host owner parent_asset_id pci_domain priority product_details requires_av serial should_timesync should_update site_id vlan zone \
| strcat \
    [| inputlookup ot_security_config \
    | search config_name=asset_crit_attributes \
    | rex field=value max_match=10 "(?<value>\w+)" \
    | table value \
    | mvexpand value \
    | stats values(value) as value \
    | nomv value \
    | rex mode=sed field=value "s/ / \":\" /g" \
    | return $value ] priority_join \
| eval hw_join=nt_host+":"+asset_id \
| lookup ot_asset_pri_matrix priority_join as priority_join OUTPUT asset_criticality as priority
iseval = 0

[get_ot_assets_hw_update]
definition = tag=ot_asset \
| dedup nt_host, asset_id, ip, mac, asset_vendor, asset_model \
| table _time sourcetype asset_id asset_model asset_status asset_system asset_type asset_vendor asset_version asset_criticality bunit category city classification country dns end_of_support exposure ip is_expected lat location long mac nt_host owner parent_asset_id pci_domain priority product_details requires_av serial should_timesync should_update site_id vlan zone \
| eval asset_id=lower(asset_id), asset_model=lower(asset_model), asset_status=lower(asset_status), asset_system=lower(asset_system), asset_type=lower(asset_type), asset_vendor=lower(asset_vendor), asset_version=lower(asset_version), asset_criticality=lower(asset_criticality), bunit=lower(bunit), category=lower(category), city=lower(city), classification=lower(classification), country=lower(country), dns=lower(dns), end_of_support=lower(end_of_support), exposure=lower(exposure), ip=lower(ip), is_expected=lower(is_expected), lat=lower(lat), location=lower(location), long=lower(long), mac=lower(mac), nt_host=lower(nt_host), owner=lower(owner), parent_asset_id=lower(parent_asset_id), pci_domain=lower(pci_domain), priority=lower(priority), product_details=lower(product_details), requires_av=lower(requires_av), serial=lower(serial), should_timesync=lower(should_timesync), should_update=lower(should_update), site_id=lower(site_id), vlan=lower(vlan), zone=lower(zone)\
| table _time sourcetype asset_id asset_model asset_status asset_system asset_type asset_vendor asset_version asset_criticality bunit category city classification country dns end_of_support exposure ip is_expected lat location long mac nt_host owner parent_asset_id pci_domain priority product_details requires_av serial should_timesync should_update site_id vlan zone\
| strcat \
    [| inputlookup ot_security_config \
    | search config_name=asset_crit_attributes \
    | rex field=value max_match=10 "(?<value>\w+)" \
    | table value \
    | mvexpand value \
    | stats values(value) as value \
    | nomv value \
    | rex mode=sed field=value "s/ / \":\" /g" \
    | return $value ] priority_join \
| eval hw_join=nt_host+":"+asset_id \
| lookup ot_asset_pri_matrix priority_join as priority_join OUTPUT asset_criticality as priority \
| lookup ot_asset_lookup hw_join as hw_join OUTPUT nt_host as nt_host_match \
| search NOT nt_host_match=*
iseval = 0

[make_ot_asset_vul_latest]
definition = index=cve sourcetype="cveproducts" \
| rex field=_raw max_match=100 "\{(?P<A_SW_CVE_01>\"product_name\".*version_affected\"\:\s+\"[^\"]+\")" \
| rex mode=sed field=A_SW_CVE_01 "s/[\[\]\{\}]+//g" \
| mvexpand A_SW_CVE_01 \
| eval _raw=A_SW_CVE_01 \
| extract pairdelim="," kvdelim=":" auto=t \
| rex field=A_SW_CVE_01 max_match=100 "(?P<A_SW_CVE_02>\"version_value\":\s+\"[\d\.]+\"\,\s+\"version_affected\"\:\s+\".\")" \
| mvexpand A_SW_CVE_02 \
| eval _raw=A_SW_CVE_02 \
| rex field=A_SW_CVE_02 max_match=100 "\"version_value\"\:\s+\"(?<version_value>[\d\.]+)\"\,\s+\"version_affected\"\:\s+\"(?<version_affected>[^\"])+\"" \
| rename affects.vendor.vendor_data{}.vendor_name as vendor_name \
| fillnull value="=" version_affected \
| eval vendor_name=lower(vendor_name) \
| eval product_name=lower(product_name) \
| eval version_value=lower(version_value) \
| eval cve=lower(cve) \
| rex mode=sed field=product_name "s/[-_]+/ /g" \
| rex mode=sed field=version_value "s/[a-z]+//g" \
| table _time sourcetype vendor_name product_name version_affected version_value cve \
| dedup vendor_name product_name version_affected version_value \
| eval cve_nvd_join=vendor_name+":"+product_name \
| lookup ot_asset_vul_join_table join_key as cve_nvd_join OUTPUT vendor as lookup_vendor, name as lookup_name \
| eval lookup_name=mvindex(lookup_name,0) \
| eval lookup_vendor=mvindex(lookup_vendor,0) \
| strcat lookup_vendor ":" lookup_name cve_asset_join \
| outputlookup ot_asset_nvd_vul_latest.csv
iseval = 0

[get_ot_assets_sw]
definition = tag=ot_asset_sw \
| dedup nt_host asset_id asset_name \
| eval asset_name=lower(asset_name), category=lower(category), dns=lower(dns), end_of_support=lower(end_of_support), hash_method=lower(hash_method), hash_value=lower(hash_value), install_date=lower(install_date), ip=lower(ip), license_key=lower(license_key), mac=lower(mac), nt_host=lower(nt_host), parent_asset_id=lower(parent_asset_id), should_timesync=lower(should_timesync), should_update=lower(should_update), type=lower(type), vendor=lower(vendor), version=lower(version), nt_host=lower(nt_host), asset_id=lower(asset_id), asset_vendor=lower(asset_vendor), asset_type=lower(asset_type), asset_model=lower(asset_model), asset_version=lower(asset_version)\
| table _time sourcetype nt_host asset_id asset_vendor asset_type asset_model asset_version asset_id asset_name category dns end_of_support hash_method hash_value install_date ip license_key mac nt_host parent_asset_id should_timesync should_update type vendor version\
| eval cve_join=((vendor+":")+asset_name) \
| eval hw_join=((nt_host+":")+asset_id)\
| lookup ot_asset_nvd_vul_latest.csv cve_asset_join as cve_join OUTPUT cve as cve \
| fillnull value=NONE cve\
| lookup ot_asset_lookup hw_join as hw_join OUTPUT priority as priority
iseval = 0

[make_ot_assets_hw]
definition = tag=ot_asset \
| dedup nt_host, asset_id, ip, mac, asset_vendor, asset_model \
| table _time sourcetype asset_id asset_model asset_status asset_system asset_type asset_vendor asset_version asset_criticality bunit category city classification country dns end_of_support exposure ip is_expected lat location long mac nt_host owner parent_asset_id pci_domain priority product_details requires_av serial should_timesync should_update site_id vlan zone \
| eval asset_id=lower(asset_id), asset_model=lower(asset_model), asset_status=lower(asset_status), asset_system=lower(asset_system), asset_type=lower(asset_type), asset_vendor=lower(asset_vendor), asset_version=lower(asset_version), asset_criticality=lower(asset_criticality), bunit=lower(bunit), category=lower(category), city=lower(city), classification=lower(classification), country=lower(country), dns=lower(dns), end_of_support=lower(end_of_support), exposure=lower(exposure), ip=lower(ip), is_expected=lower(is_expected), lat=lower(lat), location=lower(location), long=lower(long), mac=lower(mac), nt_host=lower(nt_host), owner=lower(owner), parent_asset_id=lower(parent_asset_id), pci_domain=lower(pci_domain), priority=lower(priority), product_details=lower(product_details), requires_av=lower(requires_av), serial=lower(serial), should_timesync=lower(should_timesync), should_update=lower(should_update), site_id=lower(site_id), vlan=lower(vlan), zone=lower(zone)\
| fields - _time sourcetype\
| strcat \
    [| inputlookup ot_security_config \
    | search config_name=asset_crit_attributes \
    | rex field=value max_match=10 "(?<value>\w+)" \
    | table value \
    | mvexpand value \
    | stats values(value) as value \
    | nomv value \
    | rex mode=sed field=value "s/ / \":\" /g" \
    | return $value ] priority_join \
| eval hw_join=nt_host+":"+asset_id \
| lookup ot_asset_pri_matrix priority_join as priority_join OUTPUT asset_criticality as priority\
| outputlookup ot_asset_lookup.csv
iseval = 0

[create_ot_asset_test_historian]
definition = index=otbase "hardware.vendor"=* \
| dedup name, deviceId, connections{}.L3Address, connections{}.L2Address hardware.vendor hardware.model \
| table _time sourcetype name deviceId category connections{}.L3Address connections{}.L2Address connections{}.network safety description asset_criticality location exposure installationDate zone stage serialNumber hardware.description hardware.endOfLife hardware.lifecycle hardware.model hardware.orderNumber hardware.safety hardware.type hardware.vendor hardware.vendorLink context.deviceGroup context.location context.locationId context.otSystem context.referenceLocation \
| rename connections{}.L3Address as ip, connections{}.L2Address as mac, name as nt_host, asset_criticality as priority, category as category, asset_criticality as asset_criticality, hardware.type as asset_type, context.deviceGroup as classification, description as description, exposure as exposure, zone as function, context.location as location, stage as status, hardware.vendor as vendor_product, hardware.model as version, hardware.model as hw_model, zone as zone \
| eval vendor_product=lower(vendor_product) \
| eval category=lower(asset_type) \
| eval hw_model=lower(hw_model) \
| eval nt_host=lower(nt_host) \
| eval deviceId=lower(deviceId) \
| eval asset_type=lower(asset_type) \
| eval exposure=lower(exposure) \
| eval location=lower(location) \
| table _time sourcetype ip mac nt_host deviceId dns owner priority lat long city country bunit category pci_domain is_expected should_timesync should_update requires_av asset_criticality asset_type classification description exposure function is_safety_related location status vendor_product version hw_model zone \
| table ip mac nt_host dns owner priority lat long city country bunit category pci_domain is_expected should_timesync should_update requires_av deviceId asset_criticality asset_type classification description exposure function is_safety_related location status vendor_product version hw_model zone \
| strcat \
    [| inputlookup ot_security_config \
    | search config_name=asset_crit_attributes \
    | rex field=value max_match=10 "(?<value>\w+)" \
    | table value \
    | mvexpand value \
    | stats values(value) as value \
    | nomv value \
    | rex mode=sed field=value "s/ / \":\" /g" \
    | return $value ] priority_join \
| eval hw_join=nt_host+":"+deviceId \
| lookup ot_asset_pri_matrix priority_join as priority_join OUTPUT asset_criticality as asset_criticality\
| head 1\
| eval ip="172.16.0.77"\
| eval mac="00:0E:8C:41:49:77"\
| eval nt_host="plant_hist"\
| eval category="historian"\
| eval deviceId="plant_hist"\
| eval asset_criticality="critical"\
| eval asset_type="historian"\
| eval hw_join=nt_host+":"+deviceId\
| eval priority_join=asset_type+":"+exposure+":"+location\
| outputlookup append=true ot_asset_lookup.csv
iseval = 0

[ot_vuln_latest(1)]
args = arg1
definition = index=cve sourcetype=cveinfo\
| eval date_epoch_now=now()\
| convert timeformat="%Y-%m-%dT%H:%MZ" mktime(lastModifiedDate) as date_epoch_lastmod\
| eval _time=date_epoch_lastmod\
| eval date_latest_cut_window=date_epoch_now-(86500*$arg1$)\
| where _time>date_latest_cut_window
iseval = 0

[s4ots_OT_Assets_indexes]
definition = (index=otbase)
iseval = 0

[make_ot_assets_hw_update]
definition = tag=ot_asset \
| dedup nt_host, asset_id, ip, mac, asset_vendor, asset_model \
| table _time sourcetype asset_id asset_model asset_status asset_system asset_type asset_vendor asset_version asset_criticality bunit category city classification country dns end_of_support exposure ip is_expected lat location long mac nt_host owner parent_asset_id pci_domain priority product_details requires_av serial should_timesync should_update site_id vlan zone \
| eval asset_id=lower(asset_id), asset_model=lower(asset_model), asset_status=lower(asset_status), asset_system=lower(asset_system), asset_type=lower(asset_type), asset_vendor=lower(asset_vendor), asset_version=lower(asset_version), asset_criticality=lower(asset_criticality), bunit=lower(bunit), category=lower(category), city=lower(city), classification=lower(classification), country=lower(country), dns=lower(dns), end_of_support=lower(end_of_support), exposure=lower(exposure), ip=lower(ip), is_expected=lower(is_expected), lat=lower(lat), location=lower(location), long=lower(long), mac=lower(mac), nt_host=lower(nt_host), owner=lower(owner), parent_asset_id=lower(parent_asset_id), pci_domain=lower(pci_domain), priority=lower(priority), product_details=lower(product_details), requires_av=lower(requires_av), serial=lower(serial), should_timesync=lower(should_timesync), should_update=lower(should_update), site_id=lower(site_id), vlan=lower(vlan), zone=lower(zone)\
| fields - _time sourcetype\
| strcat \
    [| inputlookup ot_security_config \
    | search config_name=asset_crit_attributes \
    | rex field=value max_match=10 "(?<value>\w+)" \
    | table value \
    | mvexpand value \
    | stats values(value) as value \
    | nomv value \
    | rex mode=sed field=value "s/ / \":\" /g" \
    | return $value ] priority_join \
| eval hw_join=nt_host+":"+asset_id \
| lookup ot_asset_pri_matrix priority_join as priority_join OUTPUT asset_criticality as priority \
| lookup ot_asset_lookup hw_join as hw_join OUTPUT nt_host as nt_host_match \
| search NOT nt_host_match=* \
| outputlookup append=true ot_asset_lookup.csv
iseval = 0

[get_ot_assets_sw_old]
definition = tag=ot_asset \
| rex field=_raw max_match=100 "\{(?P<A_SW_ASSET>\"category\"[^\}]+)\}" \
| table _time sourcetype nt_host asset_id asset_vendor asset_type asset_model asset_version A_SW_ASSET \
| mvexpand A_SW_ASSET \
| eval _raw=A_SW_ASSET \
| extract pairdelim="," kvdelim=":" auto=f \
| eval nt_host=lower(nt_host), asset_vendor=lower(asset_vendor), asset_type=lower(asset_type), asset_model=lower(asset_model), asset_version=lower(asset_version), asset_id=lower(asset_id), type=lower(type), vendor=lower(vendor), product_name=lower(hardware_vendor) , version=lower(version), category=lower(category), lifecycle=lower(lifecycle) \
| eval sw_name=lower(name), sw_version=lower(version), sw_type=lower(type), sw_vendor=lower(vendor), sw_category=lower(category), sw_installdate=lower(installDate), sw_licensekey=lower(licenseKey), sw_lifecycle=lower(lifecycle), sw_endofsupport=lower(endOfSupport) \
| eval sw_vendor=if(isnull(sw_vendor), asset_vendor, sw_vendor) \
| rex mode=sed field=name "s/[-_]+/ /g" \
| rex mode=sed field=version "s/[a-z]+//g" \
| rex mode=sed field=product_name "s/[-_]+/ /g" \
| table _time sourcetype nt_host asset_id asset_vendor asset_type asset_model asset_version sw_name sw_type sw_vendor sw_version sw_category sw_installdate sw_licensekey sw_lifecycle sw_endofsupport \
| eval cve_join=sw_vendor+":"+nt_host \
| eval hw_join=nt_host+":"+asset_id \
| lookup ot_asset_nvd_vul_latest cve_asset_join as cve_join OUTPUT cve as cve \
| fillnull value=NONE cve \
| lookup ot_asset_lookup hw_join as hw_join OUTPUT priority as priority
iseval = 0

[get_latest_vuln(1)]
args = arg1
definition = index=cve earliest=-$arg1$d latest=now\
| dedup cve sourcetype\
| eval _time=lastModifiedDate\
| stats values(publishedDate) as publishedDate, values(lastModifiedDate) as lastModifiedDate, values(impact.baseMetricV2.cvssV2.baseScore) as base_score, values(description.description_data{}.value) as description, values(references.reference_data{}.name) as reference, values(affects.vendor.vendor_data{}.vendor_name) as vendor, values(affects.vendor.vendor_data{}.product.product_data{}.product_name) as product_name, values(affects.vendor.vendor_data{}.product.product_data{}.version.version_data{}.version_value) as version, count by cve\
| eval date_epoch_now=now() \
| convert timeformat="%Y-%m-%dT%H:%MZ" mktime(lastModifiedDate) as date_epoch_lastmod \
| eval _time=date_epoch_lastmod \
| eval date_latest_cut_window=date_epoch_now-(86500*$arg1$) \
| where _time>date_latest_cut_window\
| table _time lastModifiedDate publishedDate cve vendor product_name version base_score description reference
iseval = 0


#### Section for NERC/CIP

[get_esp_zone(1)]
args = zone
definition = makemv $zone$ delim="|"\
| mvexpand $zone$\
| search $zone$="esp:*"\
| eval $zone$=UPPER(replace($zone$, "esp:", ""))
iseval = 0

[get_cip_info_by_hostname(2)]
args = hostfield,prefix
definition = lookup cip_asset_lookup.csv nt_host as $hostfield$ OUTPUTNEW classification as $prefix$_classification, location as $prefix$_location,nt_host as $prefix$_nt_host, zone as $prefix$_zone, ip as $prefix$_ip, priority as $prefix$_priority, lat as $prefix$_lat, long as $prefix$_long, asset_type as $prefix$_asset_type, dns as $prefix$_dns, category as $prefix$_category, requires_av as $prefix$_requires_av, should_update as $prefix$_should_update, site_id as $prefix$_site_id
iseval = 0

[get_cip_info_by_ip(2)]
args = ipfield,prefix
definition = lookup cip_asset_lookup.csv ip as $ipfield$ OUTPUT classification as $prefix$_classification, location as $prefix$_location,nt_host as $prefix$_nt_host, zone as $prefix$_zone, priority as $prefix$_priority, lat as $prefix$_lat, long as $prefix$_long, asset_type as $prefix$_asset_type, dns as $prefix$_dns, category as $prefix$_category, requires_av as $prefix$_requires_av, should_update as $prefix$_should_update, site_id as $prefix$_site_id
iseval = 0

[get_cip_type_and_icon(3)]
args = assetField,iconField,masterField
definition = lookup cip_asset_type_lookup.csv asset_type as $assetField$ OUTPUTNEW icon as $iconField$, asset_master_type as $masterField$, color
iseval = 0

[get_usb_datasources]
definition = index=*
iseval = 0

[get_firewall_datasources]
definition = index=*
iseval = 0

[get_cip_info_by_dns(2)]
args = dnsfield,prefix
definition = lookup cip_asset_lookup.csv dns as $dnsfield$ OUTPUTNEW classification as $prefix$_classification, location as $prefix$_location,nt_host as $prefix$_nt_host, zone as $prefix$_zone, priority as $prefix$_priority, lat as $prefix$_lat, long as $prefix$_long, asset_type as $prefix$_asset_type, dns as $prefix$_dns, category as $prefix$_category, requires_av as $prefix$_requires_av, should_update as $prefix$_should_update, site_id as $prefix$_site_id
iseval = 0

[get_app_datamodel]
definition = sourcetype="script:installedapps"
iseval = 0

[get_baseline_group]
definition = join type=left host [| inputlookup cip_baseline_groups | makemv delim="|" group_members | mvexpand group_members | rename group_members as host | eval group_id=_key | fields host, group_name,group_id ]
iseval = 0

[get_baseline_os]
definition = join type=left group_id \
[| `get_os_baseline`  \
| eval baseline_id=_key, baseline_OS=os_name \
| rename created_date as baseline_created_date | fields baseline_created_date,baseline_OS,group_id,baseline_id ]
iseval = 0

[get_baseline_applications]
definition = join type=left group_id,value \
    [| `get_application_baseline`\
    | eval app_type=software_type, value=name.":".version.":".publisher\
    | fields group_id,baseline_id,value,app_type ]
iseval = 0

[get_eventreview_tags]
definition = tag=authentication OR tag=malware OR tag=update
iseval = 0

[get_installedapps_datasources]
definition = sourcetype="Script:InstalledApps"
iseval = 0

[get_os_datasources]
definition = source=operatingsystem sourcetype=winhostmon
iseval = 0

[get_baseline_patches]
definition = join type=left group_id,kb \
    [| `get_patch_baseline` \
    | eval baseline_title=title, baseline_update_type=patch_type, baseline_severity=severity, baseline_is_declined=is_declined, baseline_approval_state=is_approved, baseline_patch_creation_date=patch_creation_date\
    | rename created_date as baseline_created_date \
    | fields baseline_*,group_id,kb ]
iseval = 0

[get_high_cip_assets(1)]
args = besField
definition = $besField$="*cip:high*"
iseval = 0

[get_low_cip_assets(1)]
args = besField
definition = $besField$="*cip:low*"
iseval = 0

[get_medium_cip_assets(1)]
args = besField
definition = $besField$="*cip:medium*"
iseval = 0

[get_medium_or_low_cip_assets(1)]
args = besField
definition = $besField$="*cip:medium*" OR $besField$="*cip:low*"
iseval = 0

[get_high_medium_low_cip_assets(1)]
args = besField
definition = $besField$="*cip:high*" OR $besField$="*cip:medium*" OR $besField$="*cip:low*"
iseval = 0

[get_cip_pca_assets(1)]
args = categoryField
definition = $categoryField$="*cip:PCA*"
iseval = 0

[get_cip_tca_assets(1)]
args = categoryField
definition = $categoryField$="*cip:TCA*"
iseval = 0

[get_removable_media_indexes]
definition = index=main DeviceType="Removable Storage"
#definition = index=*
iseval = 0

[get_high_medium_cip_assets(1)]
args = besField
definition = $besField$="*cip:high*" OR $besField$="*cip:medium*"
iseval = 0

[get_baseline_app_installs]
definition = join type=left group_id,value \
    [ search sourcetype="Script:InstalledApps" \
    | `get_baseline_group` \
    | fillnull DisplayVersion,DisplayName,Publisher value="NA" \
    | eval DisplayName=replace(DisplayName, "\"", ""),value=DisplayName.":".DisplayVersion.":".Publisher, installed="True" \
    | search group_id=* \
    | fields group_id,value,installed,host,group_name ]
iseval = 0

[get_cip_bca_assets(1)]
args = categoryField
definition = $categoryField$="*cip:BCA*"
iseval = 0

[get_cip_asset_type(2)]
args = classificationField, name
definition = eval $name$=CASE(\
match($classificationField$, ".*cip:BCA.*"), "BCA",\
match($classificationField$, ".*cip:PCA.*"), "PCA",\
match($classificationField$, ".*cip:EACM.*"), "EACM",\
match($classificationField$, ".*cip:PACS.*"), "PACS",\
match($classificationField$, ".*cip:TCA.*"), "TCA")
iseval = 0

[get_2fa_indexes]
definition = index=*
iseval = 0

[get_application_baseline]
definition = inputlookup system_baselines \
| eval baseline_id=_key\
| search config_type=applications config_asset_type=computer\
| spath input=config path=configs{} output=software \
| mvexpand software\
| eval software=replace(software, ":\s\",", ": \"")\
| eval software=replace(software, ",[^\"]", " ")\
| eval software=replace(software, "\{", ""), software=replace(software, "\}", ""), software=replace(software, "\"", "") \
| eval software=split(software,","), software=TRIM(software)\
| eval software_type=mvindex(software, 0), name=mvindex(software, 1), version=mvindex(software, 2), publisher=mvindex(software, 3)\
| eval software_type=split(software_type, ":"), software_type=TRIM(mvindex(software_type, 1))\
| eval name=split(name, ":"), name=TRIM(mvindex(name, 1))\
| eval version=split(version, ":"), version=TRIM(mvindex(version, 1))\
| eval publisher=split(publisher, ":"), publisher=TRIM(mvindex(publisher, 1))\
| fields baseline_id,group_id,software_type,name,version,publisher,created_date
iseval = 0

[get_application_baseline_for_group(1)]
args = groupId
definition = inputlookup system_baselines \
| eval baseline_id=_key\
| search group_id=$groupId$ config_type=applications config_asset_type=computer\
| sort -created_date\
| head 1\
| spath input=config path=configs{} output=software \
| mvexpand software\
| eval software=replace(software, "\{", ""), software=replace(software, "\}", ""), software=replace(software, "\"", "") \
| eval software=split(software,","), software=TRIM(software)\
| eval software_type=mvindex(software, 0), name=mvindex(software, 1), version=mvindex(software, 2), publisher=mvindex(software, 3)\
| eval software_type=split(software_type, ":"), software_type=TRIM(mvindex(software_type, 1))\
| eval name=split(name, ":"), name=TRIM(mvindex(name, 1))\
| eval version=split(version, ":"), version=TRIM(mvindex(version, 1))\
| eval publisher=split(publisher, ":"), publisher=TRIM(mvindex(publisher, 1))\
| fields baseline_id,group_id,software_type,name,version,publisher,created_date
iseval = 0

[get_os_baseline]
definition = inputlookup system_baselines \
| eval baseline_id=_key \
| search config_type=os config_asset_type=computer \
| spath input=config path=configs{} output=os_name \
| mvexpand os_name| eval os_name=replace(os_name, "\{", ""), os_name=replace(os_name, "\}", ""), os_name=replace(os_name, "\"", "") \
| eval os_name=split(os_name,","), os_name=TRIM(os_name) \
| eval os_name=mvindex(os_name, 0)\
| eval os_name=split(os_name, ":"), os_name=TRIM(mvindex(os_name, 1)) \
| fields baseline_id,group_id,created_date,os_name
iseval = 0

[get_os_baseline_for_group(1)]
args = groupId
definition = inputlookup system_baselines \
| eval baseline_id=_key \
| search config_type=os config_asset_type=computer group_id=$groupId$\
| sort -created_date\
| head 1\
| spath input=config path=configs{} output=os_name \
| mvexpand os_name| eval os_name=replace(os_name, "\{", ""), os_name=replace(os_name, "\}", ""), os_name=replace(os_name, "\"", "") \
| eval os_name=split(os_name,","), os_name=TRIM(os_name) \
| eval os_name=mvindex(os_name, 0)\
| eval os_name=split(os_name, ":"), os_name=TRIM(mvindex(os_name, 1)) \
| fields baseline_id,group_id,created_date,os_name
iseval = 0

[get_portconfig_baseline]
definition = inputlookup system_baselines \
| eval baseline_id=_key \
| search config_type=port_config config_asset_type=network \
| spath input=config path=configs{} output=port_config \
| mvexpand port_config \
| eval port_config=replace(port_config, "\{", ""), port_config=replace(port_config, "\}", ""), port_config=replace(port_config, "\"", "") \
| eval port_config=split(port_config,","), port_config=TRIM(port_config) \
| eval port_id=mvindex(port_config, 0), speed=mvindex(port_config, 1), is_duplex=mvindex(port_config, 2), is_enabled=mvindex(port_config, 3) \
| eval port_id=split(port_id, ":"), port_id=TRIM(mvindex(port_id, 1)) \
| eval speed=split(speed, ":"), speed=TRIM(mvindex(speed, 1)) \
| eval is_duplex=split(is_duplex, ":"), is_duplex=TRIM(mvindex(is_duplex, 1)) \
| eval is_enabled=split(is_enabled, ":"), is_enabled=TRIM(mvindex(is_enabled, 1)) \
| fields baseline_id,group_id,port_id,speed,is_duplex,is_enabled,created_date
iseval = 0

[get_portconfig_baseline_for_group(1)]
args = groupId
definition = inputlookup system_baselines \
| eval baseline_id=_key \
| search config_type=port_config config_asset_type=network group_id=$groupId$\
| spath input=config path=configs{} output=port_config \
| mvexpand port_config \
| eval port_config=replace(port_config, "\{", ""), port_config=replace(port_config, "\}", ""), port_config=replace(port_config, "\"", "") \
| eval port_config=split(port_config,","), port_config=TRIM(port_config) \
| eval port_id=mvindex(port_config, 0), speed=mvindex(port_config, 1), is_duplex=mvindex(port_config, 2), is_enabled=mvindex(port_config, 3) \
| eval port_id=split(port_id, ":"), port_id=TRIM(mvindex(port_id, 1)) \
| eval speed=split(speed, ":"), speed=TRIM(mvindex(speed, 1)) \
| eval is_duplex=split(is_duplex, ":"), is_duplex=TRIM(mvindex(is_duplex, 1)) \
| eval is_enabled=split(is_enabled, ":"), is_enabled=TRIM(mvindex(is_enabled, 1)) \
| fields baseline_id,group_id,port_id,speed,is_duplex,is_enabled,created_date
iseval = 0

[get_patch_baseline]
definition = inputlookup system_baselines \
| eval baseline_id=_key \
| search config_type=patch config_asset_type=computer\
| spath input=config path=configs{} output=patch_config \
| mvexpand patch_config \
| eval patch_config=replace(patch_config, ",[^\"]", " ")\
| eval patch_config=replace(patch_config, "\{", ""), patch_config=replace(patch_config, "\}", ""), patch_config=replace(patch_config, "\"", "") \
| eval patch_config=split(patch_config,","), patch_config=TRIM(patch_config) \
| eval kb=mvindex(patch_config,0), title=mvindex(patch_config,1), patch_type=mvindex(patch_config,2), severity=mvindex(patch_config,3), is_declined=mvindex(patch_config,4), is_approved=mvindex(patch_config,5), patch_creation_date=mvindex(patch_config,6) \
| eval kb=split(kb, ":"), kb=TRIM(mvindex(kb, 1)) \
| eval title=split(title, ":"), title=TRIM(mvindex(title, 1)) \
| eval patch_type=split(patch_type, ":"), patch_type=TRIM(mvindex(patch_type, 1))\
| eval severity=split(severity, ":"), severity=TRIM(mvindex(severity, 1))\
| eval is_declined=split(is_declined, ":"), is_declined=TRIM(mvindex(is_declined, 1)) \
| eval is_approved=split(is_approved, ":"), is_approved=TRIM(mvindex(is_approved, 1)) \
| eval patch_creation_date=split(patch_creation_date, ":"), patch_creation_date=TRIM(mvindex(patch_creation_date, 1)) \
| fields baseline_id,group_id,created_date,kb,title,patch_type,severity,is_declined,is_approved,patch_creation_date
iseval = 0

[get_patch_baseline_for_group(1)]
args = groupId
definition = inputlookup system_baselines \
| eval baseline_id=_key \
| search config_type=patch config_asset_type=computer group_id=$groupId$\
| spath input=config path=configs{} output=patch_config \
| mvexpand patch_config \
| eval patch_config=replace(patch_config, ",[^\"]", " ")\
| eval patch_config=replace(patch_config, "\{", ""), patch_config=replace(patch_config, "\}", ""), patch_config=replace(patch_config, "\"", "") \
| eval patch_config=split(patch_config,","), patch_config=TRIM(patch_config) \
| eval kb=mvindex(patch_config,0), title=mvindex(patch_config,1), patch_type=mvindex(patch_config,2), severity=mvindex(patch_config,3), is_declined=mvindex(patch_config,4), is_approved=mvindex(patch_config,5), patch_creation_date=mvindex(patch_config,6) \
| eval kb=split(kb, ":"), kb=TRIM(mvindex(kb, 1)) \
| eval title=split(title, ":"), title=TRIM(mvindex(title, 1)) \
| eval patch_type=split(patch_type, ":"), patch_type=TRIM(mvindex(patch_type, 1))\
| eval severity=split(severity, ":"), severity=TRIM(mvindex(severity, 1))\
| eval is_declined=split(is_declined, ":"), is_declined=TRIM(mvindex(is_declined, 1)) \
| eval is_approved=split(is_approved, ":"), is_approved=TRIM(mvindex(is_approved, 1)) \
| eval patch_creation_date=split(patch_creation_date, ":"), patch_creation_date=TRIM(mvindex(patch_creation_date, 1)) \
| fields baseline_id,group_id,created_date,kb,title,patch_type,severity,is_declined,is_approved,patch_creation_date
iseval = 0

[get_cip_training_and_members]
definition = inputlookup cip_training_materials | search is_available="TRUE" | eval last_update_epoch=strptime(last_update, "%m/%d/%Y"), last_distribution_date_epoch=strptime(last_distribution_date, "%m/%d/%Y") | eval distribution_list_name=split(distribution_list_name, "|") | mvexpand distribution_list_name | lookup cip_distribution_lists distribution_list_name OUTPUTNEW members | eval members=split(members, "|") | mvexpand members
iseval = 0

[remove_identity_prefix]
definition = rex field=identity "(?<prefix>.*)\\\\"\
| fillnull prefix value=""\
| eval identity=replace(identity, prefix, "")\
| eval identity=if(prefix="", identity, substr(identity, 2))
iseval = 0

[get_physicalaccess_records]
definition = source=badge_logs index=main sourcetype="db_connect:badge_scans"
iseval = 0

[lookup_cip_information(2)]
args = sourcefield,destfield
definition = | lookup cip_asset_lookup.csv nt_host as $sourcefield$ OUTPUTNEW nt_host as hosttemp\
| lookup cip_asset_lookup.csv ip as $sourcefield$ OUTPUTNEW nt_host as iptemp\
| lookup cip_asset_lookup.csv dns as $sourcefield$ OUTPUTNEW nt_host as dnstemp\
| eval $destfield$=CASE(\
isnotnull(hosttemp), hosttemp,\
isnotnull(iptemp), iptemp,\
isnotnull(dnstemp), dnstemp,\
1=1, $sourcefield$)\
| lookup cip_asset_lookup.csv nt_host as $destfield$
iseval = 0

[exclude_internal_ips(1)]
args = fieldName
definition = NOT ($fieldName$="10.*" OR $fieldName$="172.*" OR $fieldName$="192.*")
iseval = 0

[get_host_info(2)]
args = fieldName,assignedName
definition = | lookup asset_lookup_by_str dns as $fieldName$ OUTPUTNEW $assignedName$ as dns_info\
| lookup asset_lookup_by_str nt_host as $fieldName$ OUTPUTNEW $assignedName$ as host_info\
| lookup asset_lookup_by_str ip as $fieldName$ OUTPUTNEW $assignedName$ as ip_info\
| eval $assignedName$=if(isnull(dns_info), if(isnull(host_info), ip_info, host_info), dns_info)
iseval = 0

#### Phantom related macros ####
[get_ot_asset_info(1)]
args = arg1
definition = | makeresults \
| eval key="$argv1$" \
| lookup ot_asset_lookup asset_id as key OUTPUT
iseval = 0

[otsec_action_check_software_new_detected(1)]
definition = inputlookup os_procs_detected_new.csv | search NOT $dvc$
iseval = 0
validation =
args = dvc

[otsec_action_check_software_not_allowed(1)]
definition = inputlookup os_procs_not_allowed.csv | search NOT $dvc$
iseval = 0
validation =
args = dvc

[otsec_action_check_web_malicious(1)]
args = dvc
definition = inputlookup web_access_by_asset.csv\
| table _time, c_ip, dest_host\
| eval threat_intel="Malicious Site"
iseval = 0

[otsec_action_check_web_malicious_artifacts(1)]
args = dvc
definition = tag=web ( jpg OR exe OR png OR jpeg OR pdf) ( cstv.com OR  yimg.com ) earliest=-2h latest=now\
| rex field=_raw "\/(?<artifact>[^\/\s]+\.[a-z]+)\s+"\
| rex field=_raw "http[s]*:\/\/(?<url>[^\/]*)"\
| rex field=_raw "\s+(?<dest>\d+\.\d+\.\d+\.\d+)"\
| stats values(dest) as dest, values(url) as url, count by artifact
iseval = 0

[otsec_action_check_access_priv_auth(1)]
args = dvc
definition = tag=authentication ( user=admin OR user=manager OR user=sys ) NOT (ComputerName=$dvc$) ComputerName=* app=* user=*\
| table ComputerName, app, user
iseval = 0

[otsec_action_check_access_jumpserver(1)]
args = dvc
definition = inputlookup system_access_jumpbox.csv \
| search ( dvc=$dvc$ OR NOT dvc=$dvc$ )\
| table dvc,user_id,term,src,day,date,time,duration
iseval = 0

[otsec_action_check_os_usb_activity(1)]
args = dvc
definition = usb dest_asset_type=hmi OR dest_asset_type=eng* OR dest_asset_type=server* OR dest_asset_type=*ws* dest=$dvc$\
| table _time, dest, Device_ID, Description
iseval = 0

[otsec_action_check_software_sandbox_status(1)]
args = dvc
definition = makeresults 1\
| eval dvc="$dvc$", wsd_status="enabled", wsd_user="operator"
iseval = 0

[otsec_action_check_endpoint_usb_activity(1)]
args = dvc
definition = usb dest_asset_type=hmi OR dest_asset_type=eng* OR dest_asset_type=server* OR dest_asset_type=*ws* dest=$dvc$\
| table _time, dest, Device_ID, Description
iseval = 0

[otsec_action_check_network_wireless_act(1)]
args = dvc
definition = | inputlookup wifi_connect_log.csv \
| search NOT ip=$dvc$\
| sample ratio=0.1
iseval = 0

#### Inherited from ES ####

[get_ksi_fields(2)]
args = curr,prev
definition = `get_ksi_fields($curr$,$prev$,"true",0)`
iseval = 0

[get_ksi_fields(4)]
args = curr,prev,convert,convert_to
definition = `convert_ksi_nonnumeric($curr$,$curr$,"$convert$",$convert_to$)` | `convert_ksi_nonnumeric($prev$,$prev$,"$convert$",$convert_to$)` | `get_ksi_direction($curr$,$prev$,"direction")` | `get_ksi_percent_change($curr$,$prev$,"delta")`
iseval = 0

[get_ksi_direction(3)]
args = curr,prev,outfield
definition = eval "$outfield$"=if(!(isnum('$curr$') and isnum('$prev$')), "undefined", if('$curr$' > '$prev$', "increasing", if('$curr$' < '$prev$', "decreasing", "unchanged")))
iseval = 0

[convert_ksi_nonnumeric(4)]
args = infield,outfield,convert,value
definition = eval "$outfield$"=if("$convert$"=="true" and !isnum('$infield$'), "$value$", '$infield$')
iseval = 0

[get_ksi_percent_change(3)]
args = curr,prev,outfield
definition = `get_ksi_percent_change($curr$,$prev$,$outfield$,"true")`
iseval = 0

[get_ksi_percent_change(4)]
args = curr,prev,outfield,convert
definition = eval "$outfield$"=case((isnull('$curr$') or isnull('$prev$')) and convert!="true", "undefined", '$curr$'=='$prev$', 0, isnum('$curr$') and '$curr$'!=0 and ('$prev$'==0 or !isnum('$prev$')), '$curr$'/abs('$curr$') * 100.00, isnum('$prev$') and '$prev$'!=0 and ('$curr$'==0 or !isnum('$curr$')), (0-'$prev$')/abs('$prev$') * 100, isnum('$curr$') and isnum('$prev$') and '$prev$'!=0 and '$curr$'!=0, ('$curr$'-'$prev$')/'$prev$' * 100.0, 1==1, 0) | eval "$outfield$"=if(isnum('$outfield$'),round('$outfield$', 2), '$outfield$')
iseval = 0

[get_percentage_qualitative(2)]
args = input,output
definition = eval "$output$"=case(!isnum('$input$'),"unknown",abs('$input$')>=90,"extremely",abs('$input$')>=75,"greatly",abs('$input$')>=50,"moderately",abs('$input$')>=25,"slightly",1=1,"minimally")
iseval = 0

[drop_dm_object_name(1)]
args = object
definition = rename "$object$.*" as *
iseval = 0

[get_visitoraccess_records]
definition = index=main sourcetype=visitor_logs
iseval = 0

[get_backup_indexes]
definition = host=backup01 sourcetype="Backups:ClientLogs" index=main
iseval = 0

[get_notable_asset_details]
definition = eval use_index=CASE(\
dest!="", 1,\
dvc!="", 2,\
1=1, 3)\
| eval host=CASE(\
use_index=1, dest_nt_host,\
use_index=2, dvc_nt_host,\
use_index=3, src_nt_host)\
| eval ip=CASE(\
use_index=1, dest_ip,\
use_index=2, dvc_ip,\
use_index=3, src_ip)\
| eval asset_type=CASE(\
use_index=1, dest_asset_type,\
use_index=2, dvc_asset_type,\
use_index=3, src_asset_type)\
| eval site_id=CASE(\
use_index=1, dest_site_id,\
use_index=2, dvc_site_id,\
use_index=3, src_site_id)\
| eval asset_priority=CASE(\
use_index=1, dest_priority,\
use_index=2, dvc_priority,\
use_index=3, src_priority)\
| eval zone=CASE(\
use_index=1, dest_zone,\
use_index=2, dvc_zone,\
use_index=3, src_zone)
iseval = 0

[get_physical_site_classification(3)]
args = site,location,classification
definition = join type=left $site$,$location$\
 [ | inputlookup cip_site_classification\
 | rename classification as $classification$ site as $site$ location as $location$ | table $site$,$location$,$classification$ ]
iseval = 0

[get_ot_device_asset_types(1)]
args = assetType
definition = $assetType$=PLC OR $assetType$=RTU OR $assetType$="sensor*"
iseval = 0

[get_ot_security_alerts]
definition = (sourcetype="nozomi:alert" OR sourcetype="claroty:notable*" OR sourcetype="armis:alert" OR sourcetype="forescout:OTSM:logs:alert" OR sourcetype="otsec:alert")
iseval = 0

[get_mitre_host_info_mac]
definition = lookup mitre_ics_tt_lookup technique_id OUTPUTNEW tactic_name, technique_name \
| fillnull src value="unknown" \
| fillnull dest value="unknown" \
| mvexpand src \
| mvexpand dest \
| eval technique_id=mvdedup(technique_id) \
| eval technique_name=mvdedup(technique_name) \
| eval tactic_name=mvjoin(tactic_name, "/")
iseval = 0

